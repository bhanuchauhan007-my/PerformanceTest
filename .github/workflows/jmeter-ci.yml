name: JMeter Performance Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  performance-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Prepare directories
      run: |
        mkdir -p results
        mkdir -p report-html

    - name: Download and extract JMeter
      run: |
       JMETER_VERSION=5.6.3
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${JMETER_VERSION}.tgz
        tar -xzf apache-jmeter-${JMETER_VERSION}.tgz

        # Download JMeter Plugins Manager JAR
        wget https://jmeter-plugins.org/get/ -O apache-jmeter-${JMETER_VERSION}/lib/ext/jmeter-plugins-manager.jar

        # Download cmdrunner (required by Plugins Manager)
        wget https://jmeter-plugins.org/files/cmdrunner-latest.jar -O apache-jmeter-${JMETER_VERSION}/lib/cmdrunner.jar

        # Install PluginManagerCMDInstaller to create plugin command scripts
        java -cp apache-jmeter-${JMETER_VERSION}/lib/ext/jmeter-plugins-manager.jar org.jmeterplugins.repository.PluginManagerCMDInstaller

        # Make sure the script exists and is executable
        chmod +x apache-jmeter-${JMETER_VERSION}/bin/PluginsManagerCMD.sh

        # Install the Custom Thread Groups plugin (Ultimate Thread Group)
        apache-jmeter-${JMETER_VERSION}/bin/PluginsManagerCMD.sh install jpgc-casutg

        # Verify plugin installed successfully
        echo "Installed JMeter Plugins:"
        ls apache-jmeter-${JMETER_VERSION}/lib/ext | grep jpgc || true

    - name: Start HTTPBin service
      run: |
        docker run -d -p 8080:80 --name httpbin kennethreitz/httpbin
        echo "Waiting for HTTPBin to be ready..."
        timeout 30 bash -c 'until curl -fsS http://localhost:8080/get; do sleep 2; done'
        echo "‚úÖ HTTPBin is ready!"
        curl -v http://localhost:8080/get

    - name: Run JMeter Test (PostBin_Test.jmx)
      run: |
        echo "üöÄ Running JMeter test: PostBin_Test.jmx"
        ./apache-jmeter-5.6.3/bin/jmeter -n \
          -t PostBin_Test.jmx \
          -l results/results.csv \
          -e -o report-html \
          -Jjmeter.save.saveservice.output_format=csv \
          -Jjmeter.reportgenerator.overall_granularity=1000
      continue-on-error: true

    - name: Verify JMeter Results
      run: |
        if [ -f "results/results.csv" ]; then
          echo "‚úÖ JMeter results file generated successfully"
          ls -lh results/results.csv
        else
          echo "‚ùå JMeter results file not found!"
          exit 1
        fi

    - name: Verify JMeter HTML Report
      run: |
        if [ -f "report-html/index.html" ]; then
          echo "‚úÖ JMeter HTML report generated successfully"
          ls -lh report-html/
        else
          echo "‚ùå JMeter HTML report not generated!"
          echo "Contents of report-html directory:"
          ls -la report-html/
          exit 1
        fi

    - name: Stop HTTPBin service
      if: always()
      run: docker stop httpbin || true

    - name: Upload JMeter Results (CSV)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jmeter-results
        path: results/

    - name: Upload JMeter HTML Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jmeter-html-report
        path: report-html/

    - name: Upload JMeter Log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jmeter-log
        path: jmeter.log

    - name: Display Test Summary
      if: always()
      run: |
        echo "=== üßæ Test Execution Summary ==="
        if [ -f "results/results.csv" ]; then
          TOTAL=$(grep -c ',' results/results.csv || echo '0')
          echo "Total Samples Executed: $TOTAL"
        fi
        echo "HTML Report available in GitHub Actions Artifacts (jmeter-html-report)"